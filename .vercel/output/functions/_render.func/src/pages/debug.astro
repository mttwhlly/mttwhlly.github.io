---
// This page will help us debug the server configuration
const environment = import.meta.env;
const envKeys = Object.keys(environment);

// Create a sanitized version of the environment for display
// (removing actual secrets but showing which variables exist)
const safeEnv = {};
for (const key of envKeys) {
  safeEnv[key] = environment[key] ? "[SET]" : "[NOT SET]";
}

// Get current server info
const serverProtocol = Astro.request.url.startsWith('https') ? 'https' : 'http';
const serverHost = Astro.url.host;
const fullUrl = Astro.url.toString();
---

<html>
<head>
  <title>Astro Server Debug</title>
  <style>
    body {
      font-family: system-ui, sans-serif;
      padding: 2rem;
      max-width: 800px;
      margin: 0 auto;
      line-height: 1.6;
    }
    
    h1, h2 {
      color: #4f46e5;
    }
    
    .card {
      background-color: #f9fafb;
      border-radius: 0.5rem;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      border: 1px solid #e5e7eb;
    }
    
    .success {
      color: #047857;
      background-color: #ecfdf5;
      border-color: #a7f3d0;
    }
    
    .warning {
      color: #b45309;
      background-color: #fffbeb;
      border-color: #fcd34d;
    }
    
    pre {
      background-color: #1e293b;
      color: #e2e8f0;
      padding: 1rem;
      border-radius: 0.25rem;
      overflow-x: auto;
    }
    
    code {
      font-family: 'Menlo', 'Monaco', 'Courier New', monospace;
    }
    
    .test-button {
      background-color: #4f46e5;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 0.25rem;
      cursor: pointer;
      font-weight: 500;
    }
    
    .test-button:hover {
      background-color: #4338ca;
    }
    
    .test-results {
      min-height: 200px;
      margin-top: 1rem;
    }
  </style>
</head>
<body>
  <h1>Astro Server Configuration Debug</h1>
  
  <div class="card">
    <h2>Server Information</h2>
    <p><strong>Server URL:</strong> {fullUrl}</p>
    <p><strong>Protocol:</strong> {serverProtocol}</p>
    <p><strong>Host:</strong> {serverHost}</p>
  </div>
  
  <div class="card">
    <h2>Environment Variables</h2>
    <p>Spotify API credentials (should show as [SET]):</p>
    <pre><code>SPOTIFY_CLIENT_ID: {safeEnv.SPOTIFY_CLIENT_ID || "[NOT SET]"}
SPOTIFY_CLIENT_SECRET: {safeEnv.SPOTIFY_CLIENT_SECRET || "[NOT SET]"}
SPOTIFY_REFRESH_TOKEN: {safeEnv.SPOTIFY_REFRESH_TOKEN || "[NOT SET]"}</code></pre>
  </div>
  
  <div class="card">
    <h2>API Endpoint Test</h2>
    <p>Test the Spotify API endpoint with the buttons below:</p>
    <button class="test-button" id="testGet">Test GET /api/spotify</button>
    <button class="test-button" id="testPost">Test POST /api/spotify</button>
    <div class="test-results" id="results">
      <p>Results will appear here...</p>
    </div>
  </div>
  
  <script>
    // Function to test the API endpoints
    async function testEndpoint(method) {
      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = `<p>Testing ${method} request to /api/spotify...</p>`;
      
      try {
        const response = await fetch('/api/spotify', {
          method: method
        });
        
        const status = response.status;
        let data = '';
        
        try {
          data = await response.json();
          data = JSON.stringify(data, null, 2);
        } catch (e) {
          data = await response.text();
        }
        
        resultsDiv.innerHTML = `
          <p>Response Status: ${status}</p>
          <pre><code>${data}</code></pre>
        `;
        
        if (response.ok) {
          resultsDiv.classList.add('success');
        } else {
          resultsDiv.classList.add('warning');
        }
      } catch (error) {
        resultsDiv.innerHTML = `
          <p>Error: ${error.message}</p>
        `;
        resultsDiv.classList.add('warning');
      }
    }
    
    // Add event listeners to the buttons
    document.getElementById('testGet').addEventListener('click', () => testEndpoint('GET'));
    document.getElementById('testPost').addEventListener('click', () => testEndpoint('POST'));
  </script>
</body>
</html>